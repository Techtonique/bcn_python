{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BCN | Star Welcome to BCN 's website. This package contains an implementation of Boosted Configuration ( neural ) Networks (BCNs). How do BCNs work? By creating ensembles (boosting in a supervised way) of single-layered feedforward ( neural ) Networks. If you're familiar with scikit-learn, then using BCN will be straightforward (you can use fit , predict , cross_val_score , GridSearchCV , etc.). It's worth mentioning that the Python package is built on top of the R package , thanks to rpy2 . BCN \u2019s source code is available on GitHub . Looking for a specific function? You can also use the search function available in the navigation bar. Installing 1st method : by using pip at the command line for the stable version pip install BCN 2nd method : from Github, for the development version pip install git+https://github.com/Techtonique/bcn_python.git or git clone https://github.com/Techtonique/bcn_python.git cd BCN make install Quickstart Examples of use: For classification For regression Documentation The documentation for each model can be found (work in progress) here: For the classifier For the regressor","title":"BCN | <a class=\"github-button\" href=\"https://github.com/Techtonique/bcn_python/stargazers\" data-color-scheme=\"no-preference: light; light: light; dark: dark;\" data-size=\"large\" aria-label=\"Star BCN/BCN on GitHub\">Star</a>"},{"location":"#bcn-star","text":"Welcome to BCN 's website. This package contains an implementation of Boosted Configuration ( neural ) Networks (BCNs). How do BCNs work? By creating ensembles (boosting in a supervised way) of single-layered feedforward ( neural ) Networks. If you're familiar with scikit-learn, then using BCN will be straightforward (you can use fit , predict , cross_val_score , GridSearchCV , etc.). It's worth mentioning that the Python package is built on top of the R package , thanks to rpy2 . BCN \u2019s source code is available on GitHub . Looking for a specific function? You can also use the search function available in the navigation bar.","title":"BCN | Star"},{"location":"#installing","text":"1st method : by using pip at the command line for the stable version pip install BCN 2nd method : from Github, for the development version pip install git+https://github.com/Techtonique/bcn_python.git or git clone https://github.com/Techtonique/bcn_python.git cd BCN make install","title":"Installing"},{"location":"#quickstart","text":"Examples of use: For classification For regression","title":"Quickstart"},{"location":"#documentation","text":"The documentation for each model can be found (work in progress) here: For the classifier For the regressor","title":"Documentation"},{"location":"CONTRIBUTING/","text":"BCN Code of Conduct 1. Purpose A primary goal of this project is to be inclusive to the largest number of contributors, and most importantly with the most varied and diverse backgrounds possible . As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion, or lack of religion thereof. This code of conduct outlines our expectations for all those who participate to the project, as well as the consequences for unacceptable behavior. We invite all those who participate in, to help us create safe and positive experiences for everyone. 2. Open [Source/Culture/Tech] Citizenship A supplemental goal of this Code of Conduct is to encourage participants to recognize and strengthen the relationships between our actions and their effects on other participants. Communities mirror the societies in which they exist, and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society. 3. Expected Behavior The following behaviors are expected and requested of all contributors: Attempt collaboration before conflict . Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this project. Exercise consideration and respect in your speech and actions. Refrain from demeaning, discriminatory, or harassing behavior and speech. Be mindful of your surroundings and of your fellow participants. 4. Unacceptable Behavior The following behaviors are considered harassment and are unacceptable: Violence, threats of violence or violent language directed against another person. Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language. Posting or displaying sexually explicit or violent material. Posting or threatening to post other people's personally identifying information (\"doxing\"). Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability. Inappropriate photography or recording. Unwelcome sexual attention. This includes, sexualized comments or jokes. Deliberate intimidation, stalking or following (online or in person). Advocating for, or encouraging, any of the above behavior. 5. Consequences of Unacceptable Behavior Unacceptable behavior from any contributor will not be tolerated. Anyone asked to stop unacceptable behavior is expected to comply immediately. If a contributor engages in unacceptable behavior, appropriate action will be taken, up to and including a temporary ban or permanent expulsion without warning. 6. Scope We expect all contributors to abide by this Code of Conduct in all venues, online and in-person. 7. Contact info thierry.moudiki AT gmail.com 8. License and attribution Portions of text derived from the Citizen Code of Conduct .","title":"`BCN` Code of Conduct"},{"location":"CONTRIBUTING/#bcn-code-of-conduct","text":"","title":"BCN Code of Conduct"},{"location":"CONTRIBUTING/#1-purpose","text":"A primary goal of this project is to be inclusive to the largest number of contributors, and most importantly with the most varied and diverse backgrounds possible . As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion, or lack of religion thereof. This code of conduct outlines our expectations for all those who participate to the project, as well as the consequences for unacceptable behavior. We invite all those who participate in, to help us create safe and positive experiences for everyone.","title":"1. Purpose"},{"location":"CONTRIBUTING/#2-open-sourceculturetech-citizenship","text":"A supplemental goal of this Code of Conduct is to encourage participants to recognize and strengthen the relationships between our actions and their effects on other participants. Communities mirror the societies in which they exist, and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society.","title":"2. Open [Source/Culture/Tech] Citizenship"},{"location":"CONTRIBUTING/#3-expected-behavior","text":"The following behaviors are expected and requested of all contributors: Attempt collaboration before conflict . Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this project. Exercise consideration and respect in your speech and actions. Refrain from demeaning, discriminatory, or harassing behavior and speech. Be mindful of your surroundings and of your fellow participants.","title":"3. Expected Behavior"},{"location":"CONTRIBUTING/#4-unacceptable-behavior","text":"The following behaviors are considered harassment and are unacceptable: Violence, threats of violence or violent language directed against another person. Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language. Posting or displaying sexually explicit or violent material. Posting or threatening to post other people's personally identifying information (\"doxing\"). Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability. Inappropriate photography or recording. Unwelcome sexual attention. This includes, sexualized comments or jokes. Deliberate intimidation, stalking or following (online or in person). Advocating for, or encouraging, any of the above behavior.","title":"4. Unacceptable Behavior"},{"location":"CONTRIBUTING/#5-consequences-of-unacceptable-behavior","text":"Unacceptable behavior from any contributor will not be tolerated. Anyone asked to stop unacceptable behavior is expected to comply immediately. If a contributor engages in unacceptable behavior, appropriate action will be taken, up to and including a temporary ban or permanent expulsion without warning.","title":"5. Consequences of Unacceptable Behavior"},{"location":"CONTRIBUTING/#6-scope","text":"We expect all contributors to abide by this Code of Conduct in all venues, online and in-person.","title":"6. Scope"},{"location":"CONTRIBUTING/#7-contact-info","text":"thierry.moudiki AT gmail.com","title":"7. Contact info"},{"location":"CONTRIBUTING/#8-license-and-attribution","text":"Portions of text derived from the Citizen Code of Conduct .","title":"8. License and attribution"},{"location":"LICENSE/","text":"The Clear BSD License Copyright (c) [2022] [Thierry Moudiki] All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"LICENSE"},{"location":"REFERENCES/","text":"Current references","title":"Current references"},{"location":"REFERENCES/#current-references","text":"","title":"Current references"},{"location":"documentation/classifier/","text":"Classifier [source] BCNClassifier BCN.BCNClassifier.BCNClassifier( B=10, nu=0.4, col_sample=1, lam=0.1, r=0.9, tol=0, type_optim=\"nlminb\", activation=\"sigmoid\", hidden_layer_bias=True, verbose=0, show_progress=True, seed=123, ) BCN (Boosted Configuration Networks) classification model Parameters: B: int Number of iterations of the algorithm. nu: float Learning rate. col_sample: float Percentage of columns (covariates) adjusted at each iteration of the algorithm. lam: float Defines lower and upper bounds neural networks weights. r: float With 0 < r < 1. Controls the convergence rate of residuals. tol: float Convergence tolerance for an early stopping type_optim: string Type of optimization procedure used for finding neural networks weights at each iteration (\"nlminb\", \"nmkb\", \"hjkb\", \"bobyqa\", \"randomsearch\") activation: string Activation function (must be bounded). Currently: \"sigmoid\", \"tanh\". hidden_layer_bias: boolean If there is a bias parameter in neural networks weights. If yes, True (default). verbose: int Controls verbosity (for checks). The higher, the more verbose. show_progress: boolean If True, a progress bar is displayed. seed: int For reproducibility of results. [source] fit BCNClassifier.fit(X, y, **kwargs) Fit BCN (Boosted Configuration Networks) classification model Parameters: X: {ndarray} of shape (n_samples, n_features) Training data. y: ndarray of shape (n_samples,) Target values. [source] predict BCNClassifier.predict(X, **kwargs) Predict using BCN (Boosted Configuration Networks) classification model Parameters: X: array-like, shape (n_samples, n_features) Test data. [source] predict_proba BCNClassifier.predict_proba(X, **kwargs) Predict probabilities using BCN (Boosted Configuration Networks) classification model Parameters: X: array-like, shape (n_samples, n_features) Training data.","title":"Classifier"},{"location":"documentation/classifier/#classifier","text":"[source]","title":"Classifier"},{"location":"documentation/classifier/#bcnclassifier","text":"BCN.BCNClassifier.BCNClassifier( B=10, nu=0.4, col_sample=1, lam=0.1, r=0.9, tol=0, type_optim=\"nlminb\", activation=\"sigmoid\", hidden_layer_bias=True, verbose=0, show_progress=True, seed=123, ) BCN (Boosted Configuration Networks) classification model Parameters: B: int Number of iterations of the algorithm. nu: float Learning rate. col_sample: float Percentage of columns (covariates) adjusted at each iteration of the algorithm. lam: float Defines lower and upper bounds neural networks weights. r: float With 0 < r < 1. Controls the convergence rate of residuals. tol: float Convergence tolerance for an early stopping type_optim: string Type of optimization procedure used for finding neural networks weights at each iteration (\"nlminb\", \"nmkb\", \"hjkb\", \"bobyqa\", \"randomsearch\") activation: string Activation function (must be bounded). Currently: \"sigmoid\", \"tanh\". hidden_layer_bias: boolean If there is a bias parameter in neural networks weights. If yes, True (default). verbose: int Controls verbosity (for checks). The higher, the more verbose. show_progress: boolean If True, a progress bar is displayed. seed: int For reproducibility of results. [source]","title":"BCNClassifier"},{"location":"documentation/classifier/#fit","text":"BCNClassifier.fit(X, y, **kwargs) Fit BCN (Boosted Configuration Networks) classification model Parameters: X: {ndarray} of shape (n_samples, n_features) Training data. y: ndarray of shape (n_samples,) Target values. [source]","title":"fit"},{"location":"documentation/classifier/#predict","text":"BCNClassifier.predict(X, **kwargs) Predict using BCN (Boosted Configuration Networks) classification model Parameters: X: array-like, shape (n_samples, n_features) Test data. [source]","title":"predict"},{"location":"documentation/classifier/#predict_proba","text":"BCNClassifier.predict_proba(X, **kwargs) Predict probabilities using BCN (Boosted Configuration Networks) classification model Parameters: X: array-like, shape (n_samples, n_features) Training data.","title":"predict_proba"},{"location":"documentation/regressor/","text":"Regressor [source] BCNRegressor BCN.BCNRegressor.BCNRegressor( B=10, nu=0.4, col_sample=1, lam=0.1, r=0.9, tol=0, type_optim=\"nlminb\", activation=\"sigmoid\", hidden_layer_bias=True, verbose=0, show_progress=True, seed=123, ) BCN (Boosted Configuration Networks) regression model Parameters: B: int Number of iterations of the algorithm. nu: float Learning rate. col_sample: float Percentage of columns (covariates) adjusted at each iteration of the algorithm. lam: float Defines lower and upper bounds neural networks weights. r: float With 0 < r < 1. Controls the convergence rate of residuals. tol: float Convergence tolerance for an early stopping type_optim: string Type of optimization procedure used for finding neural networks weights at each iteration (\"nlminb\", \"nmkb\", \"hjkb\", \"bobyqa\", \"randomsearch\") activation: string Activation function (must be bounded). Currently: \"sigmoid\", \"tanh\". hidden_layer_bias: boolean If there is a bias parameter in neural networks weights. If yes, True (default). verbose: int Controls verbosity (for checks). The higher, the more verbose. show_progress: boolean If True, a progress bar is displayed. seed: int For reproducibility of results. [source] fit BCNRegressor.fit(X, y, **kwargs) Fit BCN (Boosted Configuration Networks) regression model Parameters: X: {ndarray} of shape (n_samples, n_features) Training data. y: ndarray of shape (n_samples,) Target values. [source] predict BCNRegressor.predict(X, **kwargs) Predict using BCN (Boosted Configuration Networks) regression model Parameters: X: array-like, shape (n_samples, n_features) Test data.","title":"Regressor"},{"location":"documentation/regressor/#regressor","text":"[source]","title":"Regressor"},{"location":"documentation/regressor/#bcnregressor","text":"BCN.BCNRegressor.BCNRegressor( B=10, nu=0.4, col_sample=1, lam=0.1, r=0.9, tol=0, type_optim=\"nlminb\", activation=\"sigmoid\", hidden_layer_bias=True, verbose=0, show_progress=True, seed=123, ) BCN (Boosted Configuration Networks) regression model Parameters: B: int Number of iterations of the algorithm. nu: float Learning rate. col_sample: float Percentage of columns (covariates) adjusted at each iteration of the algorithm. lam: float Defines lower and upper bounds neural networks weights. r: float With 0 < r < 1. Controls the convergence rate of residuals. tol: float Convergence tolerance for an early stopping type_optim: string Type of optimization procedure used for finding neural networks weights at each iteration (\"nlminb\", \"nmkb\", \"hjkb\", \"bobyqa\", \"randomsearch\") activation: string Activation function (must be bounded). Currently: \"sigmoid\", \"tanh\". hidden_layer_bias: boolean If there is a bias parameter in neural networks weights. If yes, True (default). verbose: int Controls verbosity (for checks). The higher, the more verbose. show_progress: boolean If True, a progress bar is displayed. seed: int For reproducibility of results. [source]","title":"BCNRegressor"},{"location":"documentation/regressor/#fit","text":"BCNRegressor.fit(X, y, **kwargs) Fit BCN (Boosted Configuration Networks) regression model Parameters: X: {ndarray} of shape (n_samples, n_features) Training data. y: ndarray of shape (n_samples,) Target values. [source]","title":"fit"},{"location":"documentation/regressor/#predict","text":"BCNRegressor.predict(X, **kwargs) Predict using BCN (Boosted Configuration Networks) regression model Parameters: X: array-like, shape (n_samples, n_features) Test data.","title":"predict"},{"location":"examples/classification/","text":"Classification example import BCN as bcn import numpy as np from sklearn.datasets import load_breast_cancer from sklearn.model_selection import train_test_split from sklearn import metrics from time import time dataset = load_breast_cancer() X = dataset.data y = dataset.target # split data into training test and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=13) start = time() clf = bcn.BCNClassifier(**{'B': 132, 'nu': 0.9009239889175154, 'col_sample': 0.9272101327262355, 'lam': 0.3634893134414783, 'r': 0.9447863038069327, 'tol': 2.1760423499366634e-09, 'type_optim': 'nlminb', 'activation': 'sigmoid'}, show_progress=True).fit(X_train, y_train) print(f\"\\nElapsed {time() - start}\") print(y_train.dtype) print(clf.obj.rx2[\"type_problem\"]) preds = clf.predict(X_test) print(preds) print(y_test) print(np.mean(y_test == preds)) print(metrics.classification_report(preds, y_test))","title":"Classification"},{"location":"examples/classification/#classification-example","text":"import BCN as bcn import numpy as np from sklearn.datasets import load_breast_cancer from sklearn.model_selection import train_test_split from sklearn import metrics from time import time dataset = load_breast_cancer() X = dataset.data y = dataset.target # split data into training test and test set X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=13) start = time() clf = bcn.BCNClassifier(**{'B': 132, 'nu': 0.9009239889175154, 'col_sample': 0.9272101327262355, 'lam': 0.3634893134414783, 'r': 0.9447863038069327, 'tol': 2.1760423499366634e-09, 'type_optim': 'nlminb', 'activation': 'sigmoid'}, show_progress=True).fit(X_train, y_train) print(f\"\\nElapsed {time() - start}\") print(y_train.dtype) print(clf.obj.rx2[\"type_problem\"]) preds = clf.predict(X_test) print(preds) print(y_test) print(np.mean(y_test == preds)) print(metrics.classification_report(preds, y_test))","title":"Classification example"},{"location":"examples/regression/","text":"Regression example import BCN as bcn import numpy as np from sklearn.datasets import load_diabetes from sklearn.model_selection import train_test_split from time import time from sklearn import metrics diabetes = load_diabetes() X = diabetes.data y = diabetes.target # split data into training test and test set np.random.seed(15029) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) start = time() clf = bcn.BCNRegressor(show_progress=True).fit(X_train, y_train) print(f\"\\nElapsed {time() - start}\") print(y_train.dtype) print(clf.obj.rx2['type_problem']) preds = clf.predict(X_test) print(preds) print(y_test) print(np.sqrt(np.mean((y_test - preds)**2)))","title":"Regression"},{"location":"examples/regression/#regression-example","text":"import BCN as bcn import numpy as np from sklearn.datasets import load_diabetes from sklearn.model_selection import train_test_split from time import time from sklearn import metrics diabetes = load_diabetes() X = diabetes.data y = diabetes.target # split data into training test and test set np.random.seed(15029) X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2) start = time() clf = bcn.BCNRegressor(show_progress=True).fit(X_train, y_train) print(f\"\\nElapsed {time() - start}\") print(y_train.dtype) print(clf.obj.rx2['type_problem']) preds = clf.predict(X_test) print(preds) print(y_test) print(np.sqrt(np.mean((y_test - preds)**2)))","title":"Regression example"}]}